#!/usr/bin/env python

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, you can obtain one at http://mozilla.org/MPL/2.0/.

# This expects Python 3

import argparse
from dataclasses import dataclass
from http.client import HTTPSConnection
from shutil import which
from urllib.parse import urlsplit, parse_qs
import json
import string
import subprocess
import sys


GITCMD = which("git")
HOST = "bugzilla.mozilla.org"
PREFIX = "willkg-bug-"


@dataclass
class Bug:
    host: str = HOST
    bug_id: str = ""
    summary: str = ""


def get_bug_summary(bug):
    if bug.host == "bugzilla.mozilla.org":
        conn = HTTPSConnection(bug.host)
        headers = {"Accept": "application/json"}
        conn.request(
            "GET", "/rest/bug/%s" % bug.bug_id.strip(), headers=headers,
        )
        resp = conn.getresponse()
        if resp.status != 200:
            print("Error %s: %s" % (resp.status, resp.reason))
            raise Exception("Bad response")

        data = json.loads(resp.read())
        bug.summary = data["bugs"][0]["summary"]
        return bug


ALLOWED = string.ascii_letters + string.digits + " "
NIX_WORDS = [
    "traceback",
]


def generate_branch_name(bug_id, bug_sum):
    bug_sum = "".join([c.lower() if c in ALLOWED else "" for c in bug_sum])
    bug_sum = bug_sum.replace(" ", "-")

    for nix_word in NIX_WORDS:
        if bug_sum.startswith(nix_word):
            bug_sum = bug_sum[len(nix_word):]
        bug_sum = bug_sum.strip("-")

    branch_name = f"{PREFIX}{bug_id}-{bug_sum[:10]}"
    return branch_name.strip("-")


def get_bug_from_url(bug_url):
    parsed = urlsplit(bug_url)
    if parsed.netloc == "bugzilla.mozilla.org":
        bug_id = parse_qs(parsed.query).get("id")
        if bug_id:
            return Bug(host=parsed.netloc, bug_id=bug_id[0])


def main():
    parser = argparse.ArgumentParser(
        "Create a git branch based on a Bugzilla bug number.",
    )
    parser.add_argument("bug")

    parsed = parser.parse_args()

    bug_arg = parsed.bug
    if bug_arg.startswith("http"):
        bug = get_bug_from_url(bug_arg)
        if not bug:
            print("Could not get bug from url {bug_arg!r}")
            return 1

    else:
        bug = Bug(host=HOST, bug_id=bug_arg)

    bug = get_bug_summary(bug)
    if not bug:
        print("Could not get summary for bug {bug_arg!r}")
        return 1

    print(f"{bug.bug_id}: {bug.summary}")
    if input("Is this right? (Y/n) ").strip() != "y":
        print("Exiting.")
        return 1

    branch_name = generate_branch_name(bug.bug_id, bug.summary)
    ret = input(f"Branch name? [{branch_name}] or {PREFIX}{bug.bug_id}-").strip()
    if ret:
        branch_name = f"{PREFIX}{bug.bug_id}-{ret}"

    subprocess.check_output([GITCMD, "checkout", "-b", branch_name])


if __name__ == "__main__":
    sys.exit(main())
